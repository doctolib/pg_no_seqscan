-- Test table filtering with ignore_tables and check_tables
SET pg_no_seqscan.level = ERROR;
CREATE TABLE foo (id serial);
CREATE TABLE bar (id serial);
CREATE TABLE baz (id serial);
EXPLAIN SELECT * FROM foo;
                      QUERY PLAN                       
-------------------------------------------------------
 Seq Scan on foo  (cost=0.00..35.50 rows=2550 width=4)
(1 row)

EXPLAIN SELECT * FROM bar;
                      QUERY PLAN                       
-------------------------------------------------------
 Seq Scan on bar  (cost=0.00..35.50 rows=2550 width=4)
(1 row)

EXPLAIN SELECT * FROM baz;
                      QUERY PLAN                       
-------------------------------------------------------
 Seq Scan on baz  (cost=0.00..35.50 rows=2550 width=4)
(1 row)

-- Test ignore_tables
SET pg_no_seqscan.ignore_tables = 'something,foo,baz';
-- Only bar should error
SELECT * FROM foo;
 id 
----
(0 rows)

SELECT * FROM baz;
 id 
----
(0 rows)

SELECT * FROM bar;
ERROR:  A 'Sequential Scan' on bar has been detected.
  - Run an EXPLAIN on your query to check the query plan.
  - Make sure the query is compatible with the existing indexes.

Query: SELECT * FROM bar;

-- Reset for next test
RESET pg_no_seqscan.ignore_tables;
-- Test check_tables
SET pg_no_seqscan.check_tables = 'something,foo,baz';
-- Error expected on foo and baz only
SELECT * FROM foo;
ERROR:  A 'Sequential Scan' on foo has been detected.
  - Run an EXPLAIN on your query to check the query plan.
  - Make sure the query is compatible with the existing indexes.

Query: SELECT * FROM foo;

SELECT * FROM bar;
 id 
----
(0 rows)

SELECT * FROM baz;
ERROR:  A 'Sequential Scan' on baz has been detected.
  - Run an EXPLAIN on your query to check the query plan.
  - Make sure the query is compatible with the existing indexes.

Query: SELECT * FROM baz;

-- Cleanup
DROP TABLE foo, bar, baz;
RESET pg_no_seqscan.check_tables;
